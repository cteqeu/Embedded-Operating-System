#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xplatform_info.h"
#include "xspips.h"
//#include "font.h"
//#include "lcd8x8rgb.h"
#include "sleep.h"
#include "xil_types.h"

#define MATRIX_SPI_SELECT_1	0x01
#define MATRIX_SPI_SELECT_0	0x00

#define SPI_DEVICE_ID		XPAR_XSPIPS_0_DEVICE_ID

#ifndef TESTAPP_GEN
static XSpiPs SpiInstance;
#endif

// SPI	= MIO10 MIO11 MIO12
// SS[0] = MIO13

#define BUFFER_SIZE 24

typedef u8 VideoBuffer[BUFFER_SIZE];
u8 WriteBuffer[BUFFER_SIZE];


int main()
{
	XSpiPs_Config *SpiConfig;
	u16 SpiDeviceId= SPI_DEVICE_ID;
	//XSpiPs *SpiInstancePtr;
	int Status;
    init_platform();

    //SpiInstancePtr = &SpiInstance;

    xil_printf("Demo Appplication by Vincent Claes\n\r");
    /*
    	 * Initialize the SPI driver so that it's ready to use
    	 */
    	SpiConfig = XSpiPs_LookupConfig(SpiDeviceId);
    	if (NULL == SpiConfig) {
    		return XST_FAILURE;
    	}

    	Status = XSpiPs_CfgInitialize((&SpiInstance), SpiConfig,
    					SpiConfig->BaseAddress);
    	if (Status != XST_SUCCESS) {
    		return XST_FAILURE;
    	}

    	/*
    	 * Perform a self-test to check hardware build
    	 */
/*    	Status = XSpiPs_SelfTest((&SpiInstance));
    	if (Status != XST_SUCCESS) {
    		return XST_FAILURE;
    	}*/
    	/*
    	 * Set the SPI device as a master with manual start and manual
    	 * chip select mode options
    	 */

    	/* XSpiPs_SetOptions(SpiInstancePtr, XSPIPS_MANUAL_START_OPTION | \
    				XSPIPS_MASTER_OPTION | XSPIPS_FORCE_SSELECT_OPTION); */


    	/*
    	 * 	#define XSPIPS_MASTER_OPTION				0x00000001U  /**< Master mode option
		* 	#define XSPIPS_CLK_ACTIVE_LOW_OPTION		0x00000002U  /**< Active Low Clock option
			#define XSPIPS_CLK_PHASE_1_OPTION			0x00000004U  /**< Clock Phase one option
			#define XSPIPS_DECODE_SSELECT_OPTION		0x00000008U  /**< Select 16 slaves Option
			#define XSPIPS_FORCE_SSELECT_OPTION			0x00000010U /**< Force Slave Select
			#define XSPIPS_MANUAL_START_OPTION			0x00000020U /**< Manual Start mode option
    	 *
    	 *
    	 *
    	 */
    	 XSpiPs_SetOptions((&SpiInstance), XSPIPS_MASTER_OPTION | XSPIPS_CLK_PHASE_1_OPTION |\
    			XSPIPS_FORCE_SSELECT_OPTION);

    		/*
    		 * Set the SPI device pre-scalar to divide by 8
    		 */

    	// In the Arduino SPI library, the speed is set by the setClockDivider() function,
    	 // which divides the master clock (16MHz on most Arduinos) down to a frequency
    	 // between 8MHz (/2) and 125kHz (/128).

    	 // Our Zynq SPI Freq (MHz) is IO PLL  166.666672
    	 // Arduino SPI Master is 16 MHz => SPI.setClockDivider(SPI_CLOCK_DIV64);
    	 // So Arduino Example uses clock of 250kHz

    	 // Zynq uses clock of 166.66666 => SPI Clock if prescaler is 256 => 651KHz

    	 // I Changed the PS SPI CLock to 15.652 MHz
    	 // So changing the clock prescaler to 64 => 245kHz
    	 XSpiPs_SetClkPrescaler((&SpiInstance), XSPIPS_CLK_PRESCALE_128);
    	//XSpiPs_SetClkPrescaler((&SpiInstance), XSPIPS_CLK_PRESCALE_256);
    		/*
    			 * Set the matrix chip select
    			 */
    	//u8 WriteData = 0x88;
/*
    	u8 WriteData[24];
//    	WriteData[0]	=0b11111111;
//    	WriteData[1]	=0b11111111;
//    	WriteData[2]	=0b11111111;
//    	WriteData[4]	=0b10111101;
//    	WriteData[5]	=0b10111101;
//    	WriteData[6]	=0b10111101;
//    	WriteData[7]	=0b11011011;
//    	WriteData[8]	=0b11011011;
//    	WriteData[9]	=0b11011011;
//    	WriteData[10]	=0b11100111;
//    	WriteData[11]	=0b11100111;
//    	WriteData[12]	=0b11100111;
//    	WriteData[13]	=0b11111011;
//    	WriteData[14]	=0b11111011;
//    	WriteData[15]	=0b11111011;
//    	WriteData[16]	=0b11111101;
//    	WriteData[17]	=0b11111101;
//    	WriteData[18]	=0b11111101;
//    	WriteData[19]	=0b11111110;
//    	WriteData[20]	=0b11111110;
//    	WriteData[21]	=0b11111110;
//    	WriteData[22]	=0b11111111;
//    	WriteData[23]	=0b11111111;
    	WriteData[0]	=0b11111111;
    	WriteData[1]	=0b11111111;
    	WriteData[2]	=0b11111111;
    	WriteData[4]	=0b11111111;
    	WriteData[5]	=0b11111111;
    	WriteData[6]	=0b11111111;
    	WriteData[7]	=0b11111111;
    	WriteData[8]	=0b11111111;
    	WriteData[9]	=0b11111111;
    	WriteData[10]	=0b11111111;
    	WriteData[11]	=0b11111111;
    	WriteData[12]	=0b11111111;
    	WriteData[13]	=0b11111111;
    	WriteData[14]	=0b11111111;
    	WriteData[15]	=0b11111111;
    	WriteData[16]	=0b11111111;
    	WriteData[17]	=0b11111111;
    	WriteData[18]	=0b11111111;
    	WriteData[19]	=0b11111111;
    	WriteData[20]	=0b11111111;
    	WriteData[21]	=0b11111111;
    	WriteData[22]	=0b11111111;
    	WriteData[23]	=0b11111111;
*/

    	 for(int q=0;q<23;q++){
    		 WriteBuffer[q]=0b00111000;
    	 }


/*    	WriteBuffer[0]	=0b00000111;
    	WriteBuffer[1]	=0b00000111;
    	WriteBuffer[2]	=0b00000111;
    	WriteBuffer[3]	=0b00000111;
    	WriteBuffer[4]	=0b00000111;
    	WriteBuffer[5]	=0b00000111;
    	WriteBuffer[6]	=0b00000111;
    	WriteBuffer[7]	=0b00000111;
    	WriteBuffer[8]	=0b00000111;
    	WriteBuffer[9]	=0b00000111;
    	WriteBuffer[10]	=0b00000111;
    	WriteBuffer[11]	=0b00000111;
    	WriteBuffer[12]	=0b00000111;
    	WriteBuffer[13]	=0b00000111;
    	WriteBuffer[14]	=0b00000111;
    	WriteBuffer[15]	=0b00000111;
    	WriteBuffer[16]	=0b00000111;
    	WriteBuffer[17]	=0b00000111;
    	WriteBuffer[18]	=0b00000111;
    	WriteBuffer[19]	=0b00000111;
    	WriteBuffer[20]	=0b00000111;
    	WriteBuffer[21]	=0b00000111;
    	WriteBuffer[22]	=0b00000111;
    	WriteBuffer[23]	=0b00000111;*/
//    	u32 ChipSelect = MATRIX_SPI_SELECT_0;
//    	XSpiPs_SetSlaveSelect(SpiInstancePtr, ChipSelect);
//    	XSpiPs_PolledTransfer(SpiInstancePtr, WriteData, NULL, sizeof(WriteData));
//    cleanup_platform();
    	XSpiPs_Enable((&SpiInstance));
    	usleep_A9(5);
    	u32 ChipSelect = MATRIX_SPI_SELECT_0;
    	XSpiPs_SetSlaveSelect((&SpiInstance), ChipSelect);
    	usleep_A9(5);
    	for(int q=0;q<24;q++){
			for(int i=0; i<24; i++){
				//xil_printf("byte being sent");
				//XSpi_Transfer(SpiInstancePtr, WriteData[i], NULL, 1); // Hier wordt telkens 1byte van het display buffer verstuurd.
				//int XSpi_Transfer(XSpi *InstancePtr, u8 *SendBufPtr, u8 *RecvBufPtr,
				//		  unsigned int ByteCount);
				//s32 XSpiPs_Transfer(XSpiPs *InstancePtr, u8 *SendBufPtr,
				//			u8 *RecvBufPtr, u32 ByteCount)
	//    		s32 XSpiPs_PolledTransfer(XSpiPs *InstancePtr, u8 *SendBufPtr,
	//    						u8 *RecvBufPtr, u32 ByteCount)
	 //   		u8 *SendBufPtr = &WriteData[i];


				//XSpiPs_Transfer((&SpiInstance), &WriteBuffer[i], NULL, sizeof(WriteBuffer[i]));

				XSpiPs_Transfer((&SpiInstance), WriteBuffer, NULL, sizeof(WriteBuffer));


				//XSpiPs_PolledTransfer((&SpiInstance), WriteBuffer, NULL, 24);
				//XSpiPs_PolledTransfer((&SpiInstance), &WriteBuffer[i], NULL, sizeof(WriteBuffer[i]));

				// XSpiPs_Transfer((&SpiInstance), (u8)0b00000111, NULL, 1);
			//	XSpiPs_PolledTransfer((&SpiInstance), WriteData, NULL, sizeof(WriteData));
				// https://github.com/Architech-Silica/Zynq-MicroZed-Vivado-Workshop/blob/master/completed_code_for_cheaters/Exercise_09/exercise_09.c
				//xil_printf("byte sent %d",i);
				 usleep_A9(5); // rust tijd tussen elke byte .
			}
    	}
/* 		void Transfer () {      			//transfer the video buffer to MOD-LED8x8RGB
   digitalWrite(chipSelectPin, LOW);
   for(int i = 0; i < NumberX*24; i++){
      SPI.transfer(videobuf[i]);
      delayMicroseconds(10);
   }
   digitalWrite(chipSelectPin, HIGH);
} */
		
    	ChipSelect = MATRIX_SPI_SELECT_1;
    	XSpiPs_SetSlaveSelect((&SpiInstance), ChipSelect);
    	  xil_printf("After\n\r");
    	cleanup_platform();
    return 0;
}
